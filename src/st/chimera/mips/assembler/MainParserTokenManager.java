/* Generated By:JavaCC: Do not edit this line. MainParserTokenManager.java */
package st.chimera.mips.assembler;

public class MainParserTokenManager implements MainParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x40000L) != 0L)
            return 78;
         if ((active0 & 0x4000000L) != 0L)
            return 40;
         return -1;
      case 1:
         if ((active0 & 0x4040000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 1;
            return 66;
         }
         return -1;
      case 2:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
            return 66;
         }
         if ((active0 & 0x4000000L) != 0L)
            return 66;
         return -1;
      case 3:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 3;
            return 66;
         }
         return -1;
      case 4:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 4;
            return 66;
         }
         return -1;
      case 5:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 5;
            return 66;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 35);
      case 41:
         return jjStopAtPos(0, 36);
      case 44:
         return jjStopAtPos(0, 34);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 105:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 66);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 108:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 66);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 162;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x100003200L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 45)
                     jjAddStates(3, 4);
                  else if (curChar == 48)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAdd(69);
                  }
                  else if (curChar == 36)
                     jjCheckNAddStates(5, 18);
                  else if (curChar == 10)
                  {
                     if (kind > 2)
                        kind = 2;
                  }
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(67);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(67);
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(67);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 1:
               case 2:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 36)
                     jjCheckNAddStates(5, 18);
                  break;
               case 12:
                  if ((0x3000000000000L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 14:
                  if ((0xf000000000000L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 26:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 27:
                  if ((0x6000000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 36:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(67);
                  break;
               case 68:
                  if (curChar != 48)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(69);
                  break;
               case 69:
                  if (curChar == 58 && kind > 30)
                     kind = 30;
                  break;
               case 70:
                  if (curChar == 45)
                     jjAddStates(3, 4);
                  break;
               case 71:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(72, 69);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(72, 69);
                  break;
               case 73:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(74);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(74);
                  break;
               case 75:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(65, 67);
                  if (curChar == 109)
                     jjAddStates(19, 24);
                  else if (curChar == 98)
                     jjAddStates(25, 32);
                  else if (curChar == 97)
                     jjAddStates(33, 38);
                  else if (curChar == 115)
                     jjCheckNAddStates(39, 55);
                  else if (curChar == 120)
                     jjAddStates(56, 57);
                  else if (curChar == 111)
                     jjCheckNAddTwoStates(28, 59);
                  else if (curChar == 106)
                     jjAddStates(58, 59);
                  else if (curChar == 100)
                     jjAddStates(60, 61);
                  else if (curChar == 108)
                     jjCheckNAddStates(62, 67);
                  else if (curChar == 114)
                     jjCheckNAdd(31);
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 29;
                  if (curChar == 106)
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(67);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  if (curChar == 119)
                     jjCheckNAdd(45);
                  else if (curChar == 104)
                     jjCheckNAdd(42);
                  else if (curChar == 98)
                     jjCheckNAdd(42);
                  if (curChar == 119)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  else if (curChar == 98)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  if (curChar == 119)
                     jjCheckNAdd(39);
                  break;
               case 66:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(67);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 78:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(67);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  if (curChar == 119)
                     jjCheckNAdd(45);
                  else if (curChar == 104)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  else if (curChar == 98)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 102;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 92;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 87;
                  if (curChar == 119)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 98;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 89;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 85;
                  if (curChar == 119)
                     jjCheckNAdd(39);
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 96;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 80;
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 94;
                  else if (curChar == 114)
                     jjCheckNAdd(77);
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 83;
                  if (curChar == 108)
                     jjCheckNAdd(77);
                  break;
               case 5:
                  if (curChar == 111 && kind > 3)
                     kind = 3;
                  break;
               case 6:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 122)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 116 && kind > 3)
                     kind = 3;
                  break;
               case 10:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 118)
                     jjCheckNAdd(12);
                  break;
               case 13:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 15:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 17:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 19:
                  if (curChar == 107)
                     jjCheckNAdd(12);
                  break;
               case 20:
                  if (curChar == 112 && kind > 3)
                     kind = 3;
                  break;
               case 21:
                  if (curChar == 103)
                     jjCheckNAdd(20);
                  break;
               case 22:
                  if (curChar == 115)
                     jjCheckNAdd(20);
                  break;
               case 23:
                  if (curChar == 102)
                     jjCheckNAdd(20);
                  break;
               case 24:
                  if (curChar == 97 && kind > 3)
                     kind = 3;
                  break;
               case 25:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 28:
                  if (curChar == 114 && kind > 22)
                     kind = 22;
                  break;
               case 29:
               case 61:
                  if (curChar == 111)
                     jjCheckNAdd(28);
                  break;
               case 30:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 104 && kind > 27)
                     kind = 27;
                  break;
               case 32:
                  if (curChar == 114)
                     jjCheckNAdd(31);
                  break;
               case 33:
                  if (curChar == 106 && kind > 28)
                     kind = 28;
                  break;
               case 34:
                  if (curChar == 120)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(35);
                  break;
               case 37:
                  if (curChar == 108)
                     jjCheckNAddStates(62, 67);
                  break;
               case 38:
                  if (curChar == 98 && kind > 27)
                     kind = 27;
                  break;
               case 39:
                  if (curChar == 108 && kind > 27)
                     kind = 27;
                  break;
               case 41:
                  if (curChar == 119 && kind > 27)
                     kind = 27;
                  break;
               case 42:
                  if (curChar == 117 && kind > 27)
                     kind = 27;
                  break;
               case 43:
                  if (curChar == 98)
                     jjCheckNAdd(42);
                  break;
               case 44:
                  if (curChar == 104)
                     jjCheckNAdd(42);
                  break;
               case 45:
                  if (curChar == 114 && kind > 27)
                     kind = 27;
                  break;
               case 46:
                  if (curChar == 119)
                     jjCheckNAdd(45);
                  break;
               case 47:
                  if (curChar == 100)
                     jjAddStates(60, 61);
                  break;
               case 48:
                  if (curChar == 118 && kind > 21)
                     kind = 21;
                  break;
               case 49:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 117 && kind > 21)
                     kind = 21;
                  break;
               case 51:
                  if (curChar == 118)
                     jjCheckNAdd(50);
                  break;
               case 52:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 106)
                     jjAddStates(58, 59);
                  break;
               case 54:
                  if (curChar == 114 && kind > 20)
                     kind = 20;
                  break;
               case 55:
                  if (curChar == 108 && kind > 28)
                     kind = 28;
                  break;
               case 56:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 111)
                     jjCheckNAddTwoStates(28, 59);
                  break;
               case 58:
                  if (curChar == 105 && kind > 25)
                     kind = 25;
                  break;
               case 59:
               case 62:
                  if (curChar == 114)
                     jjCheckNAdd(58);
                  break;
               case 60:
                  if (curChar == 120)
                     jjAddStates(56, 57);
                  break;
               case 63:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(65, 67);
                  break;
               case 65:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 67:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(67);
                  break;
               case 76:
                  if (curChar == 115)
                     jjCheckNAddStates(39, 55);
                  break;
               case 77:
                  if (curChar == 108 && kind > 16)
                     kind = 16;
                  break;
               case 79:
                  if (curChar == 114)
                     jjCheckNAdd(77);
                  break;
               case 80:
                  if (curChar == 97 && kind > 16)
                     kind = 16;
                  break;
               case 81:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 118 && kind > 17)
                     kind = 17;
                  break;
               case 83:
               case 85:
                  if (curChar == 108)
                     jjCheckNAdd(82);
                  break;
               case 84:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 86:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 97)
                     jjCheckNAdd(82);
                  break;
               case 88:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 98 && kind > 22)
                     kind = 22;
                  break;
               case 90:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 117 && kind > 22)
                     kind = 22;
                  break;
               case 92:
                  if (curChar == 98)
                     jjCheckNAdd(91);
                  break;
               case 93:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 116 && kind > 22)
                     kind = 22;
                  break;
               case 95:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 116)
                     jjCheckNAdd(91);
                  break;
               case 97:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 116)
                     jjCheckNAdd(58);
                  break;
               case 99:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 117 && kind > 25)
                     kind = 25;
                  break;
               case 101:
               case 114:
                  if (curChar == 105)
                     jjCheckNAdd(100);
                  break;
               case 102:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 119)
                     jjCheckNAdd(39);
                  break;
               case 105:
                  if (curChar == 119)
                     jjCheckNAdd(45);
                  break;
               case 106:
                  if (curChar == 97)
                     jjAddStates(33, 38);
                  break;
               case 107:
                  if (curChar == 100 && kind > 22)
                     kind = 22;
                  break;
               case 108:
                  if (curChar == 100)
                     jjCheckNAdd(107);
                  break;
               case 109:
                  if (curChar == 100)
                     jjCheckNAdd(91);
                  break;
               case 110:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 110)
                     jjCheckNAdd(107);
                  break;
               case 112:
               case 117:
                  if (curChar == 100)
                     jjCheckNAdd(58);
                  break;
               case 113:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 115:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 118:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 98)
                     jjAddStates(25, 32);
                  break;
               case 120:
                  if (curChar == 113 && kind > 23)
                     kind = 23;
                  break;
               case 121:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 101 && kind > 23)
                     kind = 23;
                  break;
               case 123:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (curChar == 122 && kind > 23)
                     kind = 23;
                  break;
               case 125:
                  if (curChar == 116)
                     jjCheckNAdd(124);
                  break;
               case 126:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 101)
                     jjCheckNAdd(124);
                  break;
               case 128:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 108 && kind > 23)
                     kind = 23;
                  break;
               case 130:
               case 134:
                  if (curChar == 97)
                     jjCheckNAdd(129);
                  break;
               case 131:
                  if (curChar == 122)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 135:
                  if (curChar == 122)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 122 && kind > 24)
                     kind = 24;
                  break;
               case 139:
                  if (curChar == 101)
                     jjCheckNAdd(138);
                  break;
               case 140:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 116)
                     jjCheckNAdd(138);
                  break;
               case 142:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar == 109)
                     jjAddStates(19, 24);
                  break;
               case 144:
                  if (curChar == 105 && kind > 19)
                     kind = 19;
                  break;
               case 145:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if (curChar == 111 && kind > 19)
                     kind = 19;
                  break;
               case 148:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if (curChar == 105 && kind > 20)
                     kind = 20;
                  break;
               case 151:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if (curChar == 111 && kind > 20)
                     kind = 20;
                  break;
               case 154:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 116 && kind > 21)
                     kind = 21;
                  break;
               case 157:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if (curChar == 116)
                     jjCheckNAdd(50);
                  break;
               case 160:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 162 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   72, 69, 74, 71, 73, 8, 10, 11, 13, 15, 17, 19, 21, 22, 23, 25, 
   26, 27, 16, 146, 149, 152, 155, 158, 161, 121, 123, 126, 128, 133, 137, 140, 
   142, 108, 110, 111, 113, 116, 118, 78, 79, 81, 84, 86, 88, 90, 93, 95, 
   97, 99, 103, 38, 31, 104, 41, 105, 61, 63, 54, 56, 49, 52, 38, 40, 
   41, 43, 44, 46, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\163\171\163\143\141\154\154", null, null, null, null, 
null, null, null, "\154\165\151", null, null, null, null, null, null, null, "\54", 
"\50", "\51", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[162];
private final int[] jjstateSet = new int[324];
protected char curChar;
public MainParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public MainParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 162; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
         matchedToken = jjFillToken();
         return matchedToken;
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
